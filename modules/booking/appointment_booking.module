<?php
/**
 * @file
 * Appointment Booking module.
 */

/**
 * Implements hook_entity_info().
 */
function appointment_booking_entity_info() {
  $entities = array();

  $entities['appointment_booking'] = array(
    'label' => t('Appointment Booking'),
    'entity class' => 'AppointmentBookingEntity',
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'access callback' => 'appointment_booking_access',
    'controller class' => 'AppointmentBookingController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'appointment_booking',
    'entity keys' => array(
      'id' => 'booking_id',
      'label' => 'booking_id',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'static cache' => TRUE,
    'fieldable' => TRUE,
    'module' => 'appointment_booking',
    'view callback' => 'entity_metadata_view_single',
    'metatags' => FALSE,
    'redirect' => FALSE,
  );

  foreach (appointment_booking_types() as $name => $type) {
    $entities['appointment_booking']['bundles'][$name] = array(
      'label' => $type['label'],
      'admin' => array(
        'path' => 'admin/appointments/bookings/types/' . $name,
        'real path' => 'admin/appointments/bookings/types/' . $name,
        'bundle argument' => 4,
        'access arguments' => array('appointment booking: administer types'),
      ),
    );
  }

  return $entities;
}

/**
 * Implements hook_entity_info_alter().
 */
function appointment_booking_entity_info_alter(&$entity_info) {
  $entity_info['appointment_slot']['view modes']['booking'] = array(
    'label' => t('Booking form'),
    'custom settings' => TRUE,
  );
}

/**
 * Get a list of booking statuses.
 *
 * @return array
 *   An array of booking statuses: the keys are machine names and the values are
 *   human-readable labels.
 */
function appointment_booking_status_options() {
  return array(
    'draft' => t('Draft'),
    'booked' => t('Booked'),
  );
}

/**
 * Implements hook_menu().
 */
function appointment_booking_menu() {
  $items = array();
  $items['appointments/slots/%appointment_slot/book'] = array(
    'title' => 'Book this slot',
    'page callback' => 'appointment_booking_create_page',
    'page arguments' => array(2),
    'access callback' => 'appointment_booking_access_by_slot',
    'access arguments' => array(2),
  );
  $items['appointments/bookings/%appointment_booking'] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('appointment_booking', 2),
    'page callback' => 'appointment_booking_view',
    'page arguments' => array(2),
    'access callback' => 'appointment_booking_access',
    'access arguments' => array('view', 2),
    'type' => MENU_CALLBACK,
  );
  $items['appointments/bookings/%appointment_booking/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['appointments/bookings/%appointment_booking/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('appointment_booking_form', 2),
    'access callback' => 'appointment_booking_access',
    'access arguments' => array('update', 2),
    'file' => 'includes/appointment_booking.forms.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 1,
  );
  $items['appointments/bookings/%appointment_booking/cancel'] = array(
    'title' => 'Cancel',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('appointment_booking_cancel_confirm', 2),
    'access callback' => 'appointment_booking_access',
    'access arguments' => array('delete', 2),
    'file' => 'includes/appointment_booking.forms.inc',
    'type' => MENU_CALLBACK,
    'weight' => 3,
  );
  $items['admin/appointments/bookings/types'] = array(
    'title' => 'Appointment booking types',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('appointment booking: administer types'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function appointment_booking_admin_paths() {
  return array(
    'appointments/bookings/*/edit' => TRUE,
  );
}

/**
 * Page for making an appointment booking.
 *
 * @param AppointmentSlotEntity $slot
 */
function appointment_booking_create_page(AppointmentSlotEntity $slot) {
  $booking = appointment_booking_load_by_user($slot);
  if (!$booking) {
    $booking = entity_create('appointment_booking', array(
      'slot_id' => $slot->slot_id,
      'uid' => $GLOBALS['user']->uid,
      'booking_status' => 'draft',
    ));
  }
  $slot = appointment_slot_view($slot, 'booking');
  module_load_include('inc', 'appointment_booking', 'includes/appointment_booking.forms');
  $form = drupal_get_form('appointment_booking_form', $booking);
  return array(
    'slot' => $slot,
    'booking_form' => $form,
  );
}

/**
 * Access callback for booking an appointment based on a particular slot.
 *
 * @param AppointmentSlotEntity $slot
 * @param object $account
 *
 * @return bool
 */
function appointment_booking_access_by_slot(AppointmentSlotEntity $slot, $account = NULL) {
  $account = $account ? $account : $GLOBALS['user'];
  if ($slot->getEndTime() <= REQUEST_TIME) {
    return FALSE;
  }
  if ($slot->getCapacity() < 1) {
    return FALSE;
  }
  if (user_access('appointment booking: create', $account)) {
    if (empty($slot->data) || empty($slot->data['booking_roles'])) {
      return TRUE;
    }
    if (array_intersect(array_keys($account->roles), $slot->data['booking_roles'])) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Access callback for appointment bookings.
 *
 * @param string $op
 *   The operation to check access for ('view', 'delete', or 'update').
 * @param AppointmentBookingEntity $booking
 *   The booking entity.
 * @param object $account
 *   The Drupal user account (defaults to the current user).
 *
 * @return bool
 *   TRUE or FALSE for whether access is granted.
 */
function appointment_booking_access($op, AppointmentBookingEntity $booking, $account = NULL) {
  $account = $account ? $account : $GLOBALS['user'];
  $own = $booking->uid == $account->uid;
  if (!$account->uid) {
    $own = $booking->anonymous_id == appointment_booking_get_anonymous_id();
  }
  switch ($op) {
    case 'view':
      if ($own) {
        return TRUE;
      }
      elseif (user_access('appointment booking: update any', $account)) {
        return TRUE;
      }
      return FALSE;

    case 'delete':
      if ($own && user_access('appointment booking: delete own', $account)) {
        return TRUE;
      }
      elseif (user_access('appointment booking: update any', $account)) {
        return TRUE;
      }
      return FALSE;

    case 'update':
      if ($own && user_access('appointment booking: update own', $account)) {
        return TRUE;
      }
      elseif (user_access('appointment booking: update any', $account)) {
        return TRUE;
      }
      return FALSE;

  }
  return FALSE;
}

/**
 * Load an appointment booking.
 *
 * @param int $booking_id
 *
 * @return AppointmentBookingEntity|FALSE
 *   The booking entity, or FALSE if it cannot be found.
 */
function appointment_booking_load($booking_id) {
  $bookings = appointment_booking_load_multiple(array($booking_id));
  return $bookings ? reset($bookings) : FALSE;
}

/**
 * Load multiple appointment bookings.
 *
 * @param array $booking_ids
 * @param array $conditions
 * @param bool $reset
 *
 * @return AppointmentBookingEntity[]
 *   An array of appointment booking entities, keyed by the entity ID.
 */
function appointment_booking_load_multiple(array $booking_ids = array(), array $conditions = array(), $reset = FALSE) {
  return entity_load('appointment_booking', $booking_ids, $conditions, $reset);
}

/**
 * Implements hook_views_api().
 */
function appointment_booking_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'appointment_booking') . '/includes',
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function appointment_booking_field_extra_fields() {
  $extra = array();
  foreach (array_keys(appointment_booking_types()) as $bundle) {
    $extra['appointment_booking'][$bundle]['form'] = array(
      'status' => array(
        'label' => t('Status'),
        'weight' => 0,
      ),
    );
    $extra['appointment_booking'][$bundle]['display'] = array(
      'status' => array(
        'label' => t('Status'),
        'weight' => 0,
      ),
    );
  }
  foreach (array_keys(appointment_slot_types()) as $bundle) {
    $extra['appointment_slot'][$bundle]['form'] = array(
      'booking' => array(
        'label' => t('Booking settings'),
        'weight' => 2,
      ),
    );
  }
  return $extra;
}

/**
 * Get a list of booking types.
 *
 * @return array
 *   An array of types, each an array containing 'label', 'description', and
 *   'module', keyed by the type machine name (the bundle name).
 */
function appointment_booking_types() {
  $types = array();
  $types['default'] = array(
    'label' => t('Default'),
    'description' => t('A default booking type.'),
    'module' => 'appointment_booking',
  );
  $types += module_invoke_all('appointment_booking_type_info');
  return $types;
}

/**
 * Load an appointment booking for a given slot and user account.
 *
 * @param AppointmentSlotEntity $slot
 *   The slot entity.
 * @param object $account
 *   The Drupal user account entity (defaults to the current user).
 *
 * @return AppointmentBookingEntity|FALSE
 *   The booking entity, or FALSE if the user does not have a booking yet for
 *   this slot.
 */
function appointment_booking_load_by_user(AppointmentSlotEntity $slot, $account = NULL) {
  $account = $account ? $account : $GLOBALS['user'];
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'appointment_booking')
    ->propertyCondition('slot_id', $slot->slot_id)
    ->propertyCondition('uid', $account->uid);
  if (!$account->uid) {
    if (!user_access('appointment booking: create', drupal_anonymous_user())) {
      return FALSE;
    }
    $query->propertyCondition('anonymous_id', appointment_booking_get_anonymous_id());
  }
  $result = $query->execute();
  if (!$result || empty($result['appointment_booking'])) {
    return FALSE;
  }
  $ids = array_keys($result['appointment_booking']);
  return appointment_booking_load(reset($ids));
}

/**
 * Get a unique identifier for the anonymous user.
 */
function appointment_booking_get_anonymous_id() {
  if ($GLOBALS['user']->uid) {
    throw new Exception('The user is not anonymous');
  }
  $id = '';
  $id .= ip_address();
  if (isset($_SERVER['HTTP_USER_AGENT'])) {
    $id .= ':' . $_SERVER['HTTP_USER_AGENT'];
  }
  return drupal_hash_base64($id);
}

/**
 * Implements hook_permission().
 */
function appointment_booking_permission() {
  return array(
    'appointment booking: administer types' => array(
      'title' => t('Administer appointment booking types'),
    ),
    'appointment booking: update any' => array(
      'title' => t('Update any appointment bookings'),
    ),
    'appointment booking: update own' => array(
      'title' => t('Update own appointment bookings'),
    ),
    'appointment booking: delete own' => array(
      'title' => t('Cancel (delete) own appointment bookings'),
    ),
    'appointment booking: create' => array(
      'title' => t('Make appointment bookings'),
    ),
  );
}

/**
 * View an appointment booking.
 *
 * @param AppointmentBookingEntity $booking
 * @param string $view_mode
 *
 * @return array
 *   A Drupal render array.
 */
function appointment_booking_view(AppointmentBookingEntity $booking, $view_mode = 'default') {
  $build = array();

  $statuses = appointment_booking_status_options();
  $status_label = $statuses[$booking->booking_status];

  $slot = appointment_slot_load($booking->slot_id);

  $slot_view = appointment_slot_view($slot, 'booking_page');
  unset($slot_view['book']);
  $build['slot'] = $slot_view;

  $build['status'] = array(
    '#prefix' => '<p>',
    '#suffix' => '</p>',
    '#markup' => '<strong>' . t('Status') . ': </strong>' . $status_label,
  );

  field_attach_prepare_view('appointment_booking', array($booking->booking_id => $booking), $view_mode);
  entity_prepare_view('appointment_booking', array($booking->booking_id => $booking));
  $build += field_attach_view('appointment_booking', $booking, $view_mode);

  $build += array(
//    '#theme' => 'appointment_booking',
    '#booking' => $booking,
    '#view_mode' => $view_mode,
  );

  return $build;
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function appointment_booking_appointment_slot_view_alter(&$build) {
  $slot = $build['#slot'];
  $destination = drupal_get_destination();

  $build['links']['#links']['book'] = array();
  $book_link = &$build['links']['#links']['book'];

  if ($slot->getCapacity() < 1) {
    $book_link['title'] = t('Not available');
  }
  elseif (!user_is_logged_in() && !user_access('appointment booking: create')) {
    $book_link['title'] = t('Log in to book');
    $book_link['href'] = 'user/login';
    $book_link['query'] = array(
      'destination' => 'appointments/slots/' . $slot->slot_id . '/book',
    );
    return;
  }

  $booking = appointment_booking_load_by_user($slot);
  if (!$booking) {
    if (appointment_booking_access_by_slot($slot)) {
      $book_link['title'] = t('Book this slot');
      $book_link['href'] = 'appointments/slots/' . $slot->slot_id . '/book';
      $book_link['query'] = $destination;
    }
    return;
  }

  $status_options = appointment_booking_status_options();
  $book_link['title'] = t('!status booking', array(
    '!status' => $status_options[$booking->booking_status],
  ));
  $book_link['html'] = TRUE;
  if ($booking->booking_status == 'booked') {
    $book_link['title'] = t('&#x2713; Booked');
  }
  if (appointment_booking_access('update', $booking)) {
    $params = array(
      '@edit' => url('appointments/bookings/' . $booking->booking_id . '/edit', array('query' => $destination)),
    );
    $book_link['title'] .= ' ' . t('(<a href="@edit">edit</a>)', $params);
  }
  if (appointment_booking_access('delete', $booking)) {
    $params = array(
      '@cancel' => url('appointments/bookings/' . $booking->booking_id . '/cancel', array('query' => $destination)),
    );
    $book_link['title'] .= ' ' . t('(<a href="@cancel">cancel</a>)', $params);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function appointment_booking_form_appointment_slot_form_alter(&$form, &$form_state) {
  $role_options = user_roles(FALSE, 'appointment booking: create');
  if (!$role_options) {
    return;
  }
  $slot = $form_state['slot'];
  $booking_roles = $slot->data && isset($slot->data['booking_roles']) ? $slot->data['booking_roles'] : array();
  $form['booking'] = array(
    '#title' => t('Booking settings'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => empty($booking_roles),
  );
  $form['booking']['booking_roles'] = array(
    '#title' => t('Roles'),
    '#type' => 'checkboxes',
    '#options' => $role_options,
    '#description' => t('Select the roles allowed to book appointments for this slot.'),
    '#default_value' => $booking_roles ? $booking_roles : $role_options,
  );
  if (!isset($form['#submit'])) {
    $form['#submit'] = array();
  }
  array_unshift($form['#submit'], 'appointment_booking_slot_form_submit');
}

/**
 * Submit callback for the slot form.
 */
function appointment_booking_slot_form_submit($form, &$form_state) {
  $slot = $form_state['slot'];
  if (isset($form_state['values']['booking_roles'])) {
    $slot->data['booking_roles'] = array_filter($form_state['values']['booking_roles']);
  }
}
